#!/bin/bash 

function genfiles {
    [ -z "${conf_dir}" ] && usage
    #Credentials
    cp `jq -r '.configurations.credentials' ${conf_file}` ${conf_dir}/credentials.json
    
    #General config
    #File name of the config.json file
    temp=`jq -r '.configurations.config' ${conf_file}`
    #Change the docker image name to the one specified in ${conf_file} itself
    #Note that if we specified a registry we need to add an additional property
    #to config.json
    jq --slurpfile summ ${conf_file} '.global_resources.docker_images[0]=$summ[0].docker_image | if $summ[0].registry != null then .docker_registry.private.server=$summ[0].registry else . end' ${temp} > ${conf_dir}/config.json
    
    #Pool
    cp `jq -r '.configurations.pool' ${conf_file}` ${conf_dir}/pool.json
    
    #Jobs file
    temp=`jq -r '.configurations.jobs' ${conf_file}`
    #If no jobs file is specified, generate one
    [ ${temp} == "null" ]&& temp=`generate_jobs_file`
    #Change the docker image name to the one specified in ${conf_file} itself
    #Change the name of the azure container (note the same name expressing two things) on which store output of the application
    if [ "X"${temp} != "X" ];then 
	[ "X"${recipe} != "X" ] && cname=`echo $recipe | sed 's/_/-/g' | tr -cd '[[:alnum:]-]' | tr '[:upper:]' '[:lower:]'` || cname="outputcontainer"
	#Receipe passed, if output contanier is not specifed use the recipe name
	jq --slurpfile summ ${conf_file} --arg containername ${cname} 'if $summ[0].azure_output_container != null then .job_specifications[].tasks[].output_data.azure_storage[0].container=$summ[0].azure_output_container else .job_specifications[].tasks[].output_data.azure_storage[0].container=$containername end | .job_specifications[].tasks[].image=$summ[0].docker_image' ${temp} > ${conf_dir}/jobs.json
    fi
}

function generate_jobs_file {
    [ -z "${conf_file}" ] && return
    [ -z "${recipe}" ] && return
    therecipe=`jq -r ".recipes.${recipe}" ${conf_file}`
    if [ "${therecipe}" != "null" ];then
       eval $therecipe
       echo ".gen-jobs.json"
    else
       echo "ERROR: recipe ${recipe} not found" 1>&2
       exit 1
    fi
}

function resizepool {
    shipyard pool resize --wait -y --configdir ${conf_dir}
}

function connecttonode {
    shipyard pool ssh --nodeid ${subcmd} --configdir ${conf_dir}
}

function addpool {
    shipyard pool add --configdir ${conf_dir} 
}

function listjobs {
    shipyard jobs list --configdir ${conf_dir}
}

function listpool {
    shipyard pool list --configdir ${conf_dir}
}

function listnodes {
    shipyard pool listnodes --configdir ${conf_dir}
}

function termjobs {
    if [ ${force_yes} != 1 ];then
        if [ -z ${task_id} ];then 
                read -p "Confirm termination of *ALL* tasks [y/N]?" answer
        else 
                read -p "Confirm termination of task [y/N]?" answer
        fi
    else
        answer="y"
    fi
    case "$answer" in
            [yY]*) 
                    #If job id not specified, guess it from configurtion 
                    [ -z ${job_id} ] && job_id=`jq -r '.job_specifications[0].id' ${conf_dir}/jobs.json`
                    cmd="shipyard jobs termtasks -y --wait --configdir ${conf_dir} --jobid ${job_id}"
                    [ ! -z ${task_id} ] && cmd=${cmd}" --taskid ${task_id}"
                    eval ${cmd}
                    ;;
                *)
                    ;;
    esac 
}

function querystatus {
        ff=`mktemp`
        cmd="shipyard jobs listtasks --configdir ${conf_dir} 2>&1"
        [ ! -z ${job_id} ] && cmd=${cmd}" --jobid ${job_id}"
	cmd=${cmd}" 2>&1"
        [ ! -z ${task_id} ] && cmd=${cmd}" | grep task_id=${task_id}"
	[ $verbose -ge 1 ] && eval ${cmd} | tee ${ff} || eval ${cmd} > ${ff}
        #eval ${cmd}
        completed=`grep completed ${ff} | wc -l`
        running=`grep running ${ff} | wc -l`
        waiting=`grep active ${ff} | wc -l`
        echo "Jobs: ${completed} completed, ${running} running, ${waiting} waiting."
        case "${subcmd}" in
                completed)
                        job=`cat ${ff} | head -n1 | awk '{print $5}' | sed 's/job_id=//'`
                        tasks=`cat ${ff} | grep completed | awk '{print $6}' | sed 's/task_id=//'`
                        echo "============ COMPLETED ============"
                        echo $job $tasks
                        ;;
                running)
                        job=`cat ${ff} | head -n1 | awk '{print $5}' | sed 's/job_id=//'`
                        tasks=`cat ${ff} | grep running | awk '{print $6}' | sed 's/task_id=//'`
                        echo "============ RUNNING ============"
                        echo $job $tasks
                        ;;
                waiting)
                        job=`cat ${ff} | head -n1 | awk '{print $5}' | sed 's/job_id=//'`
                        tasks=`cat ${ff} | grep active | awk '{print $6}' | sed 's/task_id=//'`
                        echo "============ WAITING============"
                        echo $job $tasks
                        ;;
                *)
                        ;; 
        esac
}

function getfiles {
    #If job_id is not specified get it from jobs.json file
    [ -z ${job_id} ] &&  job_id=`jq -r '.job_specifications[0].id' ${conf_dir}/jobs.json` 
    #If task id is not specified assume all tasks    
    [ -z "${task_id}" ] && task_id='*'
    #Create a list of tasks, or the one(s) specified or all tasks
    [ "${task_id}" == '*' ] && tasks=`jq -r '.job_specifications[0].tasks[].id' ${conf_dir}/jobs.json` || tasks=${task_id}
    #If no subcmd is specified retrieve all files
    [ "X"${subcmd} == "X" ] && subcmd="'*'"
    for task_id in $tasks;do
        cmd="shipyard data getfile --configdir ${conf_dir} --filespec ${job_id},${task_id},${subcmd} --all 2>&1 "
	if [ $verbose -lt 1 ];then 
	  eval ${cmd} > /dev/null
          echo -ne "."
	else
	  eval ${cmd}
	fi
    done
    [ $verbose -lt 1 ] && echo -ne '\n'
}

function deljob {
    [ ${force_yes} != 1 ] && read -p "Confirm deletion of job [y/N]?" answer || answer="y"
    case "$answer" in
        [yY]*)
		#Get job from jobs.json file 
                if [ -z "${job_id}" ];then  
                        job_id=`jq -r '.job_specifications[0].id' ${conf_dir}/jobs.json`
                fi
                shipyard jobs del -y --wait --jobid ${job_id} --configdir ${conf_dir}
                ;;
        *)
                ;;
    esac
}

function deltasks {
    [ ${force_yes} != 1 ] && read -p "Confirm deletion of tasks [y/N]?" answer || answer="y"
    case "$answer" in
        [yY]*) 
                if [ -z "${job_id}" ];then  
                        job_id=`jq -r '.job_specifications[0].id' ${conf_dir}/jobs.json`
		fi                
        	shipyard jobs deltasks -y --wait --jobid ${job_id} --configdir ${conf_dir}
                ;;
        *)
                ;;
    esac
}

function terminate {
    [ ${force_yes} != 1 ] && read -p "Confirm deletion of pool [y/N]?" answer || answer="y"
    case "$answer" in
        [yY]*) 
                shipyard pool del -y --wait --configdir ${conf_dir}
                ;;
            *)
                ;;
    esac
}

function usage { 
    echo "Usage: $0 <command> [<subcommand>] [-y] [-h] [-v] [-r <recipe>] [-j <job_id>] [-t <task_id>] <summaryfile>" 1>&2
    echo "" 1>&2
    echo "where: " 1>&2
    echo "    <command> is one of:" 1>&2
    echo "       status:    show satus of tasks (accepts -j, -r)" 1>&2
    echo "                  subcommands: [completed|running|waiting|jobs|pool|nodes], " 1>&2
    echo "                      jobs: list all jobs in pool, " 1>&2 
    echo "			pool: show pool status, " 1>&2
    echo " 			nodes: show nodes status, " 1>&2
    echo "                      completed|running|waiting : print task IDs in specified status" 1>&2
    echo "       init:      initialize pool" 1>&2
    echo "       submit:    submit a job" 1>&2
    echo "       deljob:    delete a job (accepts -j)" 1>&2
    echo "       deltasks:  delte tasks associated to a job (accepts -j)" 1>&2
    echo "       terminate: deallocate pool" 1>&2
    echo "       kill:      kill tasks (accepts -j, -t)" 1>&2
    echo "       getfile:   retrieve file(s) for specified job and task id. If no file is specified, retrieve all files." 1>&2
    echo "                  if no job id is specified, retrieve it from configuration." 1>&2
    echo "                  subcommands: [<filename>], retrieve only the specified task output file (e.g. stdout.txt)." 1>&2 
    echo "       connect:   connect to a node. Subcommand must be specified and is the node id. "1>&2
    echo "       resize:    resize pool following content of configuration files. "1>&2
    echo "    <summaryfile> is a json file containgin summary configuraation" 1>&2
    echo "    -r <recipe> is a recipe name from summary file to generate the .gen-jobs.json jobs file" 1>&2
    echo "    -j <job_id> and -t <task_id> specify the job and task to operate on. Not all commands use these field." 1>&2
    echo "    -y answer yes to all questions" 1>&2
    echo "    -v turn on verbosity." 1>&2
    echo "    -h show this help." 1>&2
    exit 1
}

cmd=$1
if [ -z "${cmd}" ];then
    usage
fi
shift 1

#Check if subcommnad exists, (cmd+)subcmd+summaryfile => other two arguments
subcmd=""
if [ $# -gt 1 ];then
    if [ "$1" != "-r" ] && [ "$1" != "-h" ] && [ "$1" != "-j" ] && [ "$1" != "-t" ] && [ "$1" != "-v" ] && [ "$1" != "-y" ];then 
        subcmd=$1
        shift 1
    fi
fi

verbose=0
force_yes=0
while getopts ":r:h:j:t:yv" o; do
    case "${o}" in
        r)
            recipe=${OPTARG}
            ;;
        h)
            usage
            ;;
        j) 
            job_id=${OPTARG}
            ;;
        t)
            task_id=${OPTARG}
            ;;
        v)
            verbose=1
            ;;
        y)
            force_yes=1
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

if [ $# -lt 1 ];then
    usage
fi

conf_file=$1


#Generate/transform configuration files for shipyard
conf_dir=`mktemp -d`
genfiles
case "${cmd}" in
    status)
        case "${subcmd}" in
	   jobs)
		listjobs
		;;
	   pool)
		listpool
		;;
	   nodes)
		listnodes
		;;
	   *)
		querystatus
		;;
	esac
        #[ "$subcmd" == "jobs" ] && listjobs || querystatus
        ;;
    init)
        addpool
        ;;
    submit)
        pool=`jq '.add_pool' ${conf_file}`
        [ $pool == "true" ] && addpool
        shipyard jobs add --configdir ${conf_dir}
        ;;
    deljob)
        deljob
        ;;
    deltasks)
	deltasks
	;;
    terminate)
        terminate 
        ;;
    kill)
        termjobs
        ;;
    getfile)
        getfiles
        ;;
    connect)
	connecttonode
	;;
    resize)
	resizepool
	;;
    *)
        usage
        ;;
esac
tarfile=`mktemp -u -p . config.XXXX.tgz` 
tar czf ${tarfile} -C ${conf_dir} .
rm -rf ${conf_dir}
[ $verbose -gt 0 ] && echo "Shipyard configuration files in: "${tarfile}
