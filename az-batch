#!/bin/bash 

function genfiles {
    [ -z "${conf_dir}" ] && usage
    #Credentials
    cp `jq -r '.configurations.credentials' ${conf_file}` ${conf_dir}/credentials.json
    
    #General config
    #File name of the config.json file
    temp=`jq -r '.configurations.config' ${conf_file}`
    #Change the docker image name to the one specified in ${conf_file} itself
    jq --slurpfile summ ${conf_file} '.global_resources.docker_images[0]=$summ[0].docker_image' ${temp} > ${conf_dir}/config.json
    
    #Pool
    cp `jq -r '.configurations.pool' ${conf_file}` ${conf_dir}/pool.json
    
    #Jobs file
    temp=`jq -r '.configurations.jobs' ${conf_file}`
    #If no jobs file is specified, generate one
    [ ${temp} == "null" ]&& temp=`generate_jobs_file`
    #Change the docker image name to the one specified in ${conf_file} itself
    #Change the name of the azure container (note the same name expressing two things) on which store output of the application
    jq --slurpfile summ ${conf_file} '.job_specifications[].tasks[].output_data.azure_storage[0].container=$summ[0].azure_output_container' ${temp} | jq --slurpfile summ ${conf_file} '.job_specifications[].tasks[].image=$summ[0].docker_image' > ${conf_dir}/jobs.json
}

function generate_jobs_file {
    [ -z "${conf_file}" ] && return
    [ -z "${recipe}" ] && return
    therecipe=`jq -r ".recipes.${recipe}" ${conf_file}`
    if [ "${therecipe}" != "null" ];then
       eval $therecipe
       echo ".gen-jobs.json"
    else
       echo "ERROR: recipe ${recipe} not found" 1>&2
       exit 1
    fi
}

function addpool {
    shipyard pool add --configdir ${conf_dir} 
}

function termjobs {
    read -p "Confirm termination of jobs [y/N]?" answer
    case "$answer" in
            [yY]*) 
                    shipyard jobs deltasks -y --wait --configdir ${conf_dir}
                    shipyard jobs term -y --wait --configdir ${conf_dir} 
                    shipyard jobs del -y --wait --configdir ${conf_dir} 
                    ;;
                *)
                    ;;
    esac 
}

function clearall {
    read -p "Confirm deletion of pool [y/N]?" answer
    case "$answer" in
        [yY]*) 
                echo shipyard pool del --configdir ${conf_dir}
                ;;
        *)
                ;;
    esac
}

function usage { 
    echo "Usage: $0 <command> [-h] [-r <recipe>] <summaryfile>" 1>&2
    echo "" 1>&2
    echo "where: " 1>&2
    echo "    <command> is one of:" 1>&2
    echo "       status: show satus if tasks" 1>&2
    echo "       init:   initialize job pool" 1>&2
    echo "       submit: submit jobs to pool" 1>&2
    echo "       finish: deallocate pool" 1>&2
    echo "       kill:   kill tasks, jobs and clean pool" 1>&2
    echo "    <summaryfile> is a json file containgin summary configuraation" 1>&2
    echo "    <recipe> is a recipe name from summary file to generate the .gen-jobs.json jobs file" 1>&2
    exit 1
}


cmd=$1
if [ -z "${cmd}" ];then
    usage
fi
shift 1

while getopts ":r:h:" o; do
    case "${o}" in
        r)
            recipe=${OPTARG}
            ;;
        h)
            usage
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))
if [ $# -lt 1 ];then
    usage
fi
conf_file=$1

#Generate/transform configuration files for shipyard
conf_dir=`mktemp -d`
genfiles

case "${cmd}" in
    status)
        shipyard jobs listtasks --configdir ${conf_dir} 2>&1
        ;;
    init)
        addpool
        ;;
    submit)
        pool=`jq '.add_pool' ${conf_file}`
        [ $pool == "true" ] && addpool
        shipyard jobs add --configdir ${conf_dir}
        ;;
    finish)
        clearall
        ;;
    kill)
        termjobs
        ;;
    *)
        usage
        ;;
esac
tarfile=`mktemp -u -p . config.XXXX.tgz` 
tar czf ${tarfile} -C ${conf_dir} .
rm -rf ${conf_dir}
echo "Configuration files in: "${tarfile}
